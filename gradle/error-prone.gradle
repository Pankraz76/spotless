import static java.lang.System.getenv

apply plugin: 'net.ltgt.errorprone'

dependencies {
	errorprone('com.google.errorprone:error_prone_core:2.42.0')
	errorprone('tech.picnic.error-prone-support:error-prone-contrib:0.25.0')
	constraints {
		errorprone('com.google.guava:guava') {
			version {
				require('33.4.8-jre')
			}
			because('Older versions use deprecated methods in sun.misc.Unsafe')
			// https://github.com/junit-team/junit-framework/pull/5039#discussion_r2414490581
		}
	}
}

tasks.withType(JavaCompile).configureEach {
	options.errorprone {
		disableAllChecks = true // remove once applied error-prone.
		error(
				'AmbiguousJsonCreator',
				'AssertJNullnessAssertion',
				'AutowiredConstructor',
				'CanonicalAnnotationSyntax',
				'CollectorMutability',
				'ConstantNaming',
				'DirectReturn',
				'EmptyMethod',
				'ExplicitArgumentEnumeration',
				'ExplicitEnumOrdering',
				'FormatStringConcatenation',
				'IdentityConversion',
				'ImmutablesSortedSetComparator',
				'IsInstanceLambdaUsage',
				'LexicographicalAnnotationAttributeListing',
				'LexicographicalAnnotationListing',
				'MockitoMockClassReference',
				'MockitoStubbing',
				'NestedOptionals',
				'PrimitiveComparison',
				'RedundantStringConversion',
				'RedundantStringEscape',
				'SelfAssignment',
				'Slf4jLogStatement',
				'StringJoin',
				'StringJoining',
				'TimeZoneUsage',
				'Unused',
				'UnusedMethod',
				'UnusedVariable',
				)
		if (!getenv().containsKey('CI') && getenv('IN_PLACE')?.toBoolean()) {
			errorproneArgs.addAll(
					'-XepPatchLocation:IN_PLACE',
					'-XepPatchChecks:' +
					'AmbiguousJsonCreator,' +
					'AssertJNullnessAssertion,' +
					'AutowiredConstructor,' +
					'CanonicalAnnotationSyntax,' +
					'CollectorMutability,' +
					'ConstantNaming,' +
					'DirectReturn,' +
					'EmptyMethod,' +
					'ExplicitEnumOrdering,' +
					'FormatStringConcatenation,' +
					'IdentityConversion,' +
					'ImmutablesSortedSetComparator,' +
					'IsInstanceLambdaUsage,' +
					'LexicographicalAnnotationListing,' +
					'LexicographicalAnnotationAttributeListing,' +
					'MockitoMockClassReference,' +
					'MockitoStubbing,' +
					'NestedOptionals,' +
					'PrimitiveComparison,' +
					'RedundantStringConversion,' +
					'RedundantStringEscape,' +
					'SelfAssignment,' +
					'Slf4jLogStatement,' +
					'StringJoin,' +
					'StringJoining,' +
					'TimeZoneUsage,' +
					'Unused,' +
					'UnusedMethod,' +
					'UnusedVariable,' +
				    'ExplicitArgumentEnumeration,'
					)
		}
	}
}
